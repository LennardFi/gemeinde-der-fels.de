datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum FileRole {
    SermonAudioFile
}

model File {
    id             String      @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    extension      String
    mimeType       String
    uploadDateTime DateTime
    role           FileRole?
    chunks         FileChunk[]
    Sermon         Sermon[]
}

model FileChunk {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    content Bytes
    file    File   @relation(fields: [fileId], references: [id])
    fileId  String @db.ObjectId
}

model ErrorLog {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    errorId       String
    timestamp     DateTime
    cause         String
    message       String
    internalError Json?
    ResponseLog   ResponseLog[]
}

model ResponseLog {
    id              String    @id @default(auto()) @map("_id") @db.ObjectId
    timestamp       DateTime
    status          String
    success         Boolean
    errorLogEntry   ErrorLog? @relation(fields: [errorLogEntryId], references: [id])
    errorLogEntryId String?   @db.ObjectId
    data            Bytes?
    dataSize        Int?
    statusText      String?
}

model NewsPost {
    id              String   @id @default(auto()) @map("_id") @db.ObjectId
    publicationDate DateTime
    title           String
    description     String
}

model Sermon {
    id          String        @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    date        DateTime
    audioFile   File          @relation(fields: [audioFileId], references: [id])
    audioFileId String        @db.ObjectId
    series      SermonSeries? @relation(fields: [seriesId], references: [id])
    seriesId    String?       @db.ObjectId
    speaker     SermonSpeaker @relation(fields: [speakerId], references: [id])
    speakerId   String        @db.ObjectId
}

model SermonSpeaker {
    id       String   @id @default(auto()) @map("_id") @db.ObjectId
    name     String   @unique
    initials String   @unique
    sermon   Sermon[]
}

model SermonSeries {
    id    String   @id @default(auto()) @map("_id") @db.ObjectId
    title String
    parts Sermon[]
}

model User {
    id           String    @id @default(auto()) @map("_id") @db.ObjectId
    email        String    @unique
    userName     String    @unique
    passwordHash String
    disabled     Boolean   @default(false)
    flags        UserFlags
}

type UserFlags {
    // Can promote users to admins
    Admin          Boolean?
    // Can change calendar
    ManageCalendar Boolean?
    // Can change news
    ManageNews     Boolean?
    // Can change sermons
    ManageSermons  Boolean?
    // Can change rooms
    ManageRooms    Boolean?
    // Can create users
    ManageUser     Boolean?
}
